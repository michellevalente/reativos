#include "sdl.ceu"
#include "sdl-gfx.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;
input int  SDL_DT;
input _SDL_KeyboardEvent&& SDL_KEYDOWN;
input _SDL_KeyboardEvent&& SDL_KEYUP;
input _SDL_MouseButtonEvent&& SDL_MOUSEBUTTONDOWN;


native do
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;
    ##define ID(x) x
end
native @pure _ID();

var _SDL_Window&? win;
    finalize
        win = &_SDL_CreateWindow("Game",
                _SDL_WINDOWPOS_UNDEFINED, _SDL_WINDOWPOS_UNDEFINED,
                640, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(&&win!);
    end

_SDL_GetWindowSize(&&win!, &&_REN_W, &&_REN_H);

finalize
    _REN = _SDL_CreateRenderer(&&win!, -1, 0);
with
    _SDL_DestroyRenderer(_REN);
end

class Cloud with
    var _SDL_Renderer& ren;
    var _SDL_Rect      r;
    var int            vx;
do
    var int x = -this.r.w * 1000;
    par do
        every dt in SDL_DT do
            x = x + this.vx*dt;
            
        end
    with
        if(x > 640000) then
            escape true;
        end
    with
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(&&this.ren,
                                    0xDD,0xDD,0xDD,0x00);
            this.r.x = x / 1000;
            _SDL_RenderFillRect(&&this.ren, &&this.r);
        end
    end
end

class Coin with
    var _SDL_Renderer& ren;
    var _SDL_Rect      r;
    event void collided;
do

    par/or do
        await this.collided;
        escape true;
    with
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(&&this.ren,
                                    0xDD,0xDD,0x00,0x00);
            _SDL_RenderFillRect(&&this.ren, &&this.r);
        end
    end
end

class Player with
    var _SDL_Renderer& ren;
    event void collided;
    var _SDL_Rect r = _SDL_Rect(0,0, 20,50);
do
    var int x = (640/2 - 20/2) * 1000;
    var int y = (480-50) * 1000;
    var int vx = 0;
    var int vy = 0;

    par do
        every dt in SDL_DT do
            x = x + vx*dt;
            y = y + vy*dt;
            if(y > 430000) then
                y = 430000;
            end
            if(x > 620000) then
                x = 620000;
            end
            if(x < 0) then
                x = 0;
            end
            if(y < 0) then
                y = 0;
            end
        end
    with
        await this.collided;
        escape true;
    with
        par do
            loop do
                var _SDL_KeyboardEvent&& key;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_LEFT;
                vx = -100;
                key = await SDL_KEYUP   until key:keysym.sym==_SDLK_LEFT;
                vx = 0;
            end
        with
            loop do
                var _SDL_KeyboardEvent&& key;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_RIGHT;
                vx = 100;
                key = await SDL_KEYUP   until key:keysym.sym==_SDLK_RIGHT;
                vx = 0;
            end
        with
            loop do
                var _SDL_KeyboardEvent&& key;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_UP;
                vy = -100;
                key = await SDL_KEYUP   until key:keysym.sym==_SDLK_UP;
                vy = 0;
            end
        with
            loop do
                var _SDL_KeyboardEvent&& key;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_DOWN;
                vy = 100;
                key = await SDL_KEYUP   until key:keysym.sym==_SDLK_DOWN;
                vy = 0;
            end
        end
    with
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(&&this.ren,
                                    0x00,0x00,0x00,0x00);
            r.x = x / 1000;
            r.y = y / 1000;
            _SDL_RenderFillRect(&&this.ren, &&r);
        end
    end
end

_srand(_time(null));
var int is_dead = 0;

par/or do
    await SDL_QUIT;
with
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(_REN,
                                0xFF,0xFF,0xFF,0x00);
        _SDL_RenderFillRect(_REN, null);
    end
with
    pool Coin[] coins;
    var Player p with
        this.ren = &_ID(_REN);
    end;
    pool Cloud[] clouds;
    var int points = 0;
    watching p do 
        par/or do

        every 3000ms do
            spawn Cloud in clouds with
                var int w = 100 ;
                var int h = 20 ;
                var int y = h + _rand()%500;
                this.ren = &_ID(_REN);
                this.r   = _SDL_Rect(0,y,w,h);
                this.vx  = 10 + _rand()%50;
            end;
        end

        with
            every 750ms do
                spawn Coin in coins with
                    var int x = _rand()%1000;
                    var int y = _rand()%1000;
                    this.ren   = &_ID(_REN);
                    this.r   = _SDL_Rect(x,y,10,10);
                end;
            end 
        with
            every SDL_DT do
                var Coin&&?[] tocol;
                loop c1 in coins do
                    if _SDL_HasIntersection(&&c1:r, &&p.r) then
                        tocol = []..tocol..[c1];
                    end
                end
                loop i in $tocol do
                    if tocol[i]? then
                        points = points + 1;
                        _printf("Pontos: %d\n", points);
                        emit tocol[i]!:collided;
                    end
                end 
            end
        with
            every SDL_DT do
                var Cloud&&?[] tocol; 
                loop c2 in clouds do
                   if _SDL_HasIntersection(&&c2:r, &&p.r) then
                        tocol = []..tocol..[c2];
                        break;
                    end 
                end
                loop i in $tocol do
                    if tocol[i]? then
                        _printf("GAME OVER. TOTAL DE PONTOS: %d\n", points);
                        emit p.collided;             
                    end
                end
            end
        end
    end
    _printf("GAME OVER. TOTAL DE PONTOS: %d\n", points);
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end
escape 0;
